{"version":3,"sources":["GraphQL/Queries.js","components/Loading/Loading.jsx","components/Images/Images.jsx","App.jsx","index.js"],"names":["LOAD_IMAGES","gql","Loading","className","Images","data","useQuery","useState","images","setImages","loading","setLoading","useEffect","posts","items","length","map","img","src","thumbnail","alt","id","errorLink","onError","graphqlErrors","message","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ReactDOM","render","document","getElementById"],"mappings":"udAEO,IAAMA,EAAcC,cAAH,KCCXC,G,YAAU,kBACrB,qBAAKC,UAAU,UAAf,qCCEWC,EAAS,WAAO,IACnBC,EAASC,mBAASN,GAAlBK,KADkB,EAEEE,mBAAS,IAFX,mBAEnBC,EAFmB,KAEXC,EAFW,OAGIF,oBAAS,GAHb,mBAGnBG,EAHmB,KAGVC,EAHU,KAc1B,OATAC,qBAAU,WACHP,GAGHI,EAAUJ,EAAKQ,MAAMC,OACrBH,GAAW,IAHXA,GAAW,KAKZ,CAACN,IAGF,qCACGK,GACC,cAAC,EAAD,IAGDF,EAAOO,OAAS,GACf,qBAAKZ,UAAU,SAAf,SACGK,EAAOQ,KAAI,SAAAC,GAAG,OACb,qBAEEd,UAAU,gBACVe,IAAG,2EACgDD,EAAIE,UADpD,oBAGHC,IAAI,cALCH,EAAII,aClBjBC,G,MAAYC,aAAQ,YAAwB,IAArBC,EAAoB,EAApBA,cACvBA,GACFA,EAAcR,KAAI,gBAAGS,EAAH,EAAGA,QAAH,OAAiBC,MAAM,iBAAD,OAAkBD,WAIxDE,EAAOC,eAAK,CAChBN,EACA,IAAIO,WAAS,CAAEC,IAAK,kCAGhBC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXP,SAGWQ,EAAM,kBACjB,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,sBAAM5B,UAAU,OAAhB,SACE,cAAC,EAAD,SC1BNiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.02d9c032.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const LOAD_IMAGES = gql`\n  query getPostList {\n    posts(paging: {limit: 12}) {\n      items {\n        id,\n        thumbnail\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport './loading.scss';\n\nexport const Loading = () => (\n  <div className=\"loading\">\n    Loading...Please wait\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { LOAD_IMAGES } from '../../GraphQL/Queries';\nimport './images.scss';\nimport { Loading } from '../Loading';\n\nexport const Images = () => {\n  const { data } = useQuery(LOAD_IMAGES);\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!data) {\n      setLoading(true);\n    } else {\n      setImages(data.posts.items);\n      setLoading(false);\n    }\n  }, [data]);\n\n  return (\n    <>\n      {loading && (\n        <Loading />\n      )}\n\n      {images.length > 0 && (\n        <div className=\"images\">\n          {images.map(img => (\n            <img\n              key={img.id}\n              className=\"images__image\"\n              src={`\n                https://uwatch.ams3.cdn.digitaloceanspaces.com/${img.thumbnail}\n              `}\n              alt=\"cybersport\"\n            />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { Images } from './components/Images';\nimport './App.scss';\n\nconst errorLink = onError(({ graphqlErrors }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message }) => alert(`Graphql error ${message}`));\n  }\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri: 'https://uwatch.live/graphql' }),\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n\nexport const App = () => (\n  <ApolloProvider client={client}>\n    <main className=\"main\">\n      <Images />\n    </main>\n  </ApolloProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}